/*
url: [{ hostContains: 'twitch.tv' }, { hostContains: 'reddit.com' }]
let urlArray = [{ url: '*://*.reddit.com/*' }, { url: '*://*.twitch.tv/*' }]
the two different styles of interfacing with urls

don't need any other sample code right now
*/

let urlStorage = ['reddit.com', 'twitch.tv'];
let queryArray = [];
let timeS = { //timeS short for time storage
    closeTabs: { delayInMinutes: 1 },
    deactivate: { delayInMinutes: 2 }
};
var siteCache = {};

//so on button click [ to update settings] we need to do some tasks
//if there are any urls in the blocker section need to add them to the url storage
//then if the timer settings have changed you have to change them
//  // not sure how to validate if they're different and suggest a default setting but we'll see
//then gotta update our onvisitarray and our to query arrays

//separate on click button to delete a url
//and refresh the list of urls which should be one shorter


//this is a test oncompleted listener, when you go to test.com it triggers
//we're testing deactivating the listener with this before there's a button to push on their user settings
chrome.webNavigation.onCompleted.addListener(function () {
    //want to make a test so that when I visit this url it'll delete the ruleset
    console.log('deleting listener');
    chrome.webNavigation.onCompleted.removeListener(siteCache['reddit.com']);
    console.log('listener gone?');
}, {
    url: [{ hostContains: 'test.com' }]
})

chrome.runtime.onInstalled.addListener(
    function () {
        console.log('hello');
        mapObjectsToQuery(urlStorage);
        userInputSite('reddit.com');
        userInputSite('twitch.tv');
        //right now we don't do anything on installed
        //eventually we need to pull up a new tab with our options

        //have the user pick their website to block
        //have the option to pin the extension to the toolbar
    });

//this is our function for when a user adds a site to their banned list
function userInputSite(urlString) {
    //check if userinput urlstring is already a rule in our dictionary
    if (urlString in siteCache) return;


    //logic to turn our listener registration function in to a named function
    var newListener = function (details) {
        triggerOnCompleted(details);
    };
    //add listener for the url
    chrome.webNavigation.onCompleted.addListener(newListener, { url: [{ hostContains: urlString }] });

    //add url and paired function to restricted sites dictionary
    siteCache[urlString] = newListener;

    //add dynamic ruleset entry for url
    //need to change our file structure

    console.log(`successfully added ${urlString} to restricted sites.`)
};

//now we have two active alarms to listen for
chrome.alarms.onAlarm.addListener(function (alarm) {
    console.log(alarm.name);
    //chech which alarm we're looking at

    //the first alarm kicks us out of the tabs and initiates the blocker
    if (alarm.name === 'too much time on tab') {

        //first clear out our old notification 
        notifyClear('You have accessed a restricted site');
        //now we make a new notification
        let timeOver = new NotificationClass('Activating Blocker',
            'Time allowed has expired. Access to restricted site is blocked and all tabs are closed. You will be allowed back on in [blockTime - allowedTime]');
        notifyUser(timeOver);
        console.log('activating blocker');
        activateBadge();
        activateRuleset();
        //on this alarm activating we want to query whether we have any open tabs of the problem website
        console.log(queryArray);
        queryArray.forEach(url => //by acting on an array of url codes we can close the tabs of all of them
            chrome.tabs.query(url) //this returns a promise with all the problem urls. doesn't need Return prefix inside the forEach
                .then((tabs) => {
                    if (!tabs.length) return; //exit if we don't have any tabs found from the query
                    let map = tabs.map(t => t.id); // this creates a list of ids
                    chrome.tabs.remove(map); //close the tabs found
                    console.log('tabs from map successfully closed');
                }));
    };

    //the second alarm deactivates the blocker
    if (alarm.name === 'active ruleset timer') {
        //with the alarm triggered then we want to deactivate the ruleset again
        console.log('deactivating blocker');
        //instead of just a console log maybe we give a notification here
        deactivateBadge();
        deactivateRuleset();
        //now that the rules allow for use of the website again, we notify the user that they have access again
        notifyClear('Activating Blocker'); //clear out the old notification first
        let accessRestored = new NotificationClass('Access Restored', `Your time limit has expired, and you've regained access to your restricted site.`);
        notifyUser(accessRestored);
    };
});

//splitting the onCompleted listener logic into its own function to create new listeners every time a user
//adds a new site to their restricted websites
//you're allowed to visit website ony once, then this triggers and activates the ruleset
function triggerOnCompleted(details) {
    //need to make sure that this only triggers once per navigation
    console.log(details);
    if (details.frameId !== 0) return;

    //need to clear notifications left over from the last cycle of banning
    notifyClear('Access Restored');
    //to create a notification we create a new member of our class and pass that into the notify function
    let siteVisited = new NotificationClass('You have accessed a restricted site', 'You will be allowed [time] until you are kicked off of it.');
    //we notify the user and initiate a warning badge
    notifyUser(siteVisited);
    warningBadge();
    console.log('warning initiated, setting alarms');
    //here we've got to add two timers:
    //timer to boot you out of the reddit tab after x time
    chrome.alarms.create(name = 'too much time on tab', timeS.closeTabs);
    //then we need another alarm to turn the ruleset back off
    chrome.alarms.create(name = 'active ruleset timer', timeS.deactivate);
    console.log('both alarms successfully set');
};

//here are our two functions to turn on a ruleset or turn off a ruleset
async function deactivateRuleset() {
    let disableRule = {
        disableRulesetIds: ["antiRedditTest"]
    };
    let ourPromise = await chrome.declarativeNetRequest.updateEnabledRulesets(disableRule);
    return ourPromise;
};
async function activateRuleset() {
    let enableRule = {
        enableRulesetIds: ["antiRedditTest"]
    };
    let ourPromise = await chrome.declarativeNetRequest.updateEnabledRulesets(enableRule);
    return ourPromise;
};

//and here are two functions to turn on or off the badge
function activateBadge() {
    chrome.action.setBadgeBackgroundColor({ color: '#F00' }); //can add callback function if you want to cascade
    chrome.action.setBadgeText({ text: 'active' });
}
function deactivateBadge() {
    chrome.action.setBadgeText({ text: '' }); //this line successfully turns the badge off
}
//and a function to start the badge saying that your time on the site is counting down
function warningBadge() {
    chrome.action.setBadgeBackgroundColor({ color: '#FF6700' });
    chrome.action.setBadgeText({ text: 'allowed' });
}


//I want to create a class here to make creating the notifications object a little easier
let NotificationClass = class {
    constructor(title, message) {
        this.title = title;
        this.message = message;
        this.type = 'basic';
        this.iconUrl = './tyFav128.png';
        this.priority = 1;
        this.silent = true;
    }
};
//here are two functions to create a user notification, and one to delete notification objects
function notifyUser(notifObj) {
    chrome.notifications.create(notifObj.title, notifObj, function (notificationId) {
        console.log(notificationId, 'notification created');
    });
};
function notifyClear(notifId) {
    //if statement is unnecessary, no error if there isn't one. 
    //Could add a check to make this console log not show up though
    chrome.notifications.clear(notifId, () => {
        console.log('old notification cleared');
    })
}

//map and forEach aren't working, so I've made two functions to make object arrays for url validation
function mapObjectsToQuery(arr) {
    for (let i = 0; i < arr.length; i++) {
        x = { url: `*://*.${arr[i]}/*` };
        queryArray.push(x);
    }
};
