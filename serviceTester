/*

//exploring some alarms stuff

let minute = 1000 * 60 //ms in 1 min

chrome.alarms.onAlarm.addListener(function (alarm) {
    console.log('alarm triggered, hopefully toggled and alerted');
    alert('Alarm triggered, hopefully toggled')
    if (chrome.declarative_net_request.rule_resources.enabled = false)
        chrome.declarative_net_request.rule_resources.enabled = true;
    else chrome.declarative_net_request.rule_resources.enabled = false;
});


function createAlarm() {
    chrome.alarms.create(toggler, {
        periodInMinutes: 1
    })
};

createAlarm;

function (details) {
    let target = details.url;
    if (target == 'https://www.google.com/') {
        console.log('boom');
    }
    console.log(target, 'lol')
}

*/


chrome.runtime.onInstalled.addListener(
    function () {
        //right now we don't do anything on installed
        //eventually we need to pull up a new tab with our options

        //have the user pick their website to block
        //have the option to pin the extension to the toolbar
    });

//you're allowed to visit website ony once, then this triggers and activates the ruleset
chrome.webNavigation.onCompleted.addListener(details => {
    console.log('heard.');
    activateBadge();
    console.log('you can visit reddit this once for the  next ${storage period of time}');
    activateRuleset();
    //here we've got to add two timers:
    //timer to boot you out of the reddit tab after x time
    let tabBooterTime = {
        delayInMinutes: 1
    };
    chrome.alarms.create(name = 'too much time on tab', tabBooterTime);
    console.log(`you'll be allowed on this website for 1 minutes`);

    //then we need another alarm to turn the ruleset back off
    let reactivationTime = {
        delayInMinutes: 60 * 12 //sets alarm for 12 hours from activation
    };
    chrome.alarms.create(name = 'active ruleset timer', reactivationTime);
    //timer to deactivate the ruleset
    console.log('deactivation alarm set for 1 minute from now');
}, {
    url: [{ hostContains: '.reddit' },]
});
//end of visit function

//now we have an active alarm that will go off 1 minute from now
//so we need a listener to react to that alarm
chrome.alarms.onAlarm.addListener(function (alarm) {
    //we want to make sure we're getting the deactivate alarm and not the kick you out of the tab alarm
    if (alarm.name = 'active ruleset timer') {
        //with the alarm triggered then we want to deactivate the ruleset again
        console.log('deactivating blocker');
        //instead of just a console log maybe we give a notification here
        deactivateBadge();
        deactivateRuleset();
    };

    //here we can do the check for the boot out of tab alarm in the same function
    if (alarm.name = 'too much time on tab') {

        //highlight tab if it's not active
        //notify that tab is being closed
        //close out of tab
    };
});

//here are our two functions to turn on a ruleset or turn off a ruleset
async function deactivateRuleset() {
    let disableRule = {
        disableRulesetIds: ["antiRedditTest"]
    };
    let ourPromise = await chrome.declarativeNetRequest.updateEnabledRulesets(disableRule);
    return ourPromise;
};

async function activateRuleset() {
    let enableRule = {
        enableRulesetIds: ["antiRedditTest"]
    };
    let ourPromise = await chrome.declarativeNetRequest.updateEnabledRulesets(enableRule);
    return ourPromise;
};

//and here are two functions to turn on or off the badge
function activateBadge() {
    chrome.action.setBadgeBackgroundColor({ color: '#F00' }); //can add callback function if you want to cascade
    chrome.action.setBadgeText({ text: 'active' });
}
function deactivateBadge() {
    chrome.action.setBadgeText({ text: '' }); //this line successfully turns the badge off
}
