/*
{url: [{ hostContains: '.reddit' },]}
{ url: '*://*.reddit.com/*' };
the two different styles of interfacing with urls

don't need any other sample code right now
*/




chrome.runtime.onInstalled.addListener(
    function () {
        //right now we don't do anything on installed
        //eventually we need to pull up a new tab with our options

        //have the user pick their website to block
        //have the option to pin the extension to the toolbar
    });

//you're allowed to visit website ony once, then this triggers and activates the ruleset
chrome.webNavigation.onCompleted.addListener(details => {

    //need to make sure that this only triggers once per navigation
    console.log(details);
    if (details.frameId === 0) return;

    let testNotify2 = {
        type: 'basic',
        message: 'this is a notification please notify the user of something',
        title: 'Notification Test 2',
        iconUrl: './tyFav128.png',
        priority: 1
    };
    //Unchecked runtime.lastError: Some of the required properties are missing: type, iconUrl, title and message.
    chrome.notifications.create('Test Notification 2', testNotify2, function (notificationId) {
        console.log('did this work? it should have a notification up now');
        console.log(notificationId);
    });
    console.log('heard.');
    warningBadge();
    console.log('you can visit reddit this once for the  next ${storage period of time}');
    //here we've got to add two timers:
    //timer to boot you out of the reddit tab after x time
    let tabBooterTime = {
        delayInMinutes: 1
    };
    chrome.alarms.create(name = 'too much time on tab', tabBooterTime);
    console.log(`you'll be allowed on this website for 1 minutes`);

    //then we need another alarm to turn the ruleset back off
    let reactivationTime = {
        delayInMinutes: 3 //sets alarm for 3 mins from activation
    };
    chrome.alarms.create(name = 'active ruleset timer', reactivationTime);
    //timer to deactivate the ruleset
    console.log('deactivation alarm set for 3 mins from now');
}, {
    url: [{ hostContains: '.reddit' },]
});
//end of visit function

//now we have an active alarm that will go off 1 minute from now
//so we need a listener to react to that alarm
chrome.alarms.onAlarm.addListener(function (alarm) {
    console.log(alarm.name);
    //we want to make sure we're getting the deactivate alarm and not the kick you out of the tab alarm
    if (alarm.name === 'active ruleset timer') {
        //with the alarm triggered then we want to deactivate the ruleset again
        console.log('deactivating blocker');
        //instead of just a console log maybe we give a notification here
        deactivateBadge();
        deactivateRuleset();
    };

    //here we can do the check for the boot out of tab alarm in the same function
    if (alarm.name === 'too much time on tab') {
        console.log('alotted time on site is over. activating blocking ruleset');
        activateBadge();
        activateRuleset();
        //on this alarm activating we want to query whether we have any open tabs of the problem website
        let blockedUrl = { url: '*://*.reddit.com/*' }; //query url prop takes string or array of string 
        return chrome.tabs.query(blockedUrl) //this returns a promise with all the problem urls
            .then((tabs) => {
                console.log(tabs, 'made it into the promise then', 'tabs with the blocked url will now be closed.');
                if (!tabs.length) return; //exit if we don't have any tabs found from the query
                let map = tabs.map(t => t.id); // this creates a list of ids
                console.log('made it past the if statement', 'here are a list of your tab ids', map);
                chrome.tabs.remove(map); //close the tabs found
                console.log('tabs from map successfully closed');
            });
    };
    //right now this function has an error removing the tabs:
    //it may also be causing 
    /*
    Error in event handler: 
    TypeError: Error in invocation of 
        tabs.remove([integer|array] 
            tabIds, optional function callback): 
            
            No matching signature.
    */
});

//here are our two functions to turn on a ruleset or turn off a ruleset
async function deactivateRuleset() {
    let disableRule = {
        disableRulesetIds: ["antiRedditTest"]
    };
    let ourPromise = await chrome.declarativeNetRequest.updateEnabledRulesets(disableRule);
    return ourPromise;
};

async function activateRuleset() {
    let enableRule = {
        enableRulesetIds: ["antiRedditTest"]
    };
    let ourPromise = await chrome.declarativeNetRequest.updateEnabledRulesets(enableRule);
    return ourPromise;
};

//and here are two functions to turn on or off the badge
function activateBadge() {
    chrome.action.setBadgeBackgroundColor({ color: '#F00' }); //can add callback function if you want to cascade
    chrome.action.setBadgeText({ text: 'active' });
}
function deactivateBadge() {
    chrome.action.setBadgeText({ text: '' }); //this line successfully turns the badge off
}

//and a function to start the badge saying that your time on the site is counting down
function warningBadge() {
    chrome.action.setBadgeBackgroundColor({ color: '#FF6700' });
    chrome.action.setBadgeText({ text: 'allowed' });
}
